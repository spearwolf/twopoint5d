---
import Layout from '~layouts/VanillaDemo.astro';
import {description, showSource, title} from './_textured-quads.json';
---

<Layout title={title} showSource={showSource}>
  <p slot="demo-description">{description}</p>

  <canvas id="canvas-container" resize-to="window"></canvas>

  <div id="texture-preview" class="texture-preview"></div>
</Layout>

<style>
  body {
    height: 100vh;
    overflow-y: hidden;
  }

  body {
    background-color: #391e39;
    background: radial-gradient(circle, rgb(195, 130, 74) 0%, rgb(95, 26, 26) 100%);
  }

  .texture-preview {
    background-color: rgba(100, 100, 100, 0.8);
    border: 1px solid #000;
    border-radius: 5px;
    width: 256px;
    height: 256px;
    position: fixed;
    bottom: 20px;
    right: 20px;
    box-shadow:
      0 0 0 2px #b1b1a2,
      5px 5px 10px rgba(31, 29, 18, 0.5);
    overflow: hidden;
  }
  .texture-preview :global(img),
  .texture-preview :global(canvas) {
    max-width: 100%;
  }
</style>

<script>
  import {
    colorFromTextureByTexCoords,
    TextureCoords,
    TextureImageLoader,
    vertexByInstancePosition,
    VertexObjects,
  } from '@spearwolf/twopoint5d';
  import {attribute, vec3} from 'three/tsl';
  import {AgXToneMapping, NodeMaterial, Texture} from 'three/webgpu';
  import {InstancedQuadsGeometry} from '~demos/instanced-quads/InstancedQuadsGeometry';
  import {PerspectiveOrbitDemo} from '~demos/utils/PerspectiveOrbitDemo';
  import assetsUrl from '~demos/utils/assetsUrl';

  // +================================================================================+
  //
  // create instanced geometry and mesh
  //
  // +================================================================================+

  async function createMesh(
    rows: number,
    columns: number,
    size: number,
    offset: number,
    texCoords: TextureCoords,
    texture: Texture,
  ) {
    const geometry = new InstancedQuadsGeometry(rows * columns);

    geometry.basePool.createVO().make();

    for (let y = 0; y < rows; y++) {
      for (let x = 0; x < columns; x++) {
        const quad = geometry.instancedPool.createVO();

        quad.width = 1.0 + Math.random() * (size - 1.0);
        quad.height = quad.width;

        quad.setInstancePosition([
          x * size * offset - ((columns - 1) * size * offset) / 2,
          y * size * offset - ((rows - 1) * size * offset) / 2,
          0,
        ]);

        quad.setTexCoords([texCoords.s, texCoords.t, texCoords.u, texCoords.v]);
      }
    }

    const mesh = new VertexObjects(geometry, await createMaterial(texture));

    mesh.name = 'InstancedQuadsMesh';

    return mesh;
  }

  // +================================================================================+
  //
  // create material
  //
  // +================================================================================+

  async function createMaterial(texture: Texture) {
    const material = new NodeMaterial();

    material.positionNode = vertexByInstancePosition({scale: vec3(attribute('quadSize'), 1.0)});

    material.colorNode = colorFromTextureByTexCoords(texture);

    return material;
  }

  // +================================================================================+
  //
  // start demo
  //
  // +================================================================================+

  const demo = new PerspectiveOrbitDemo(document.getElementById('canvas-container'));

  const {imgEl, texture, texCoords} = await new TextureImageLoader().loadAsync(
    assetsUrl('ball-pattern-rot--not-power-of-2.png'),
    ['nearest', 'srgb'],
  );

  console.log('loaded texture-image', {imgEl, texCoords, texture});

  document.getElementById('texture-preview').appendChild(imgEl);

  await demo.start(async () => {
    demo.renderer!.toneMapping = AgXToneMapping;
    demo.renderer!.toneMappingExposure = 1.1;

    demo.scene.add(await createMesh(16, 32, 3.7, 1, texCoords, texture));
  });

  console.log('TexturedQuadsMesh', demo.scene.children[0]);
</script>
