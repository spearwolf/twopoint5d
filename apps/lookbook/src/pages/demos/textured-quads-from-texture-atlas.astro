---
import Layout from '~layouts/VanillaDemo.astro';
import {description, showSource, title} from './_textured-quads-from-texture-atlas.json';
---

<Layout title={title} showSource={showSource}>
  <p slot="demo-description">{description}</p>

  <canvas id="canvas-container" resize-to="window"></canvas>

  <div id="texture-preview" class="texture-preview"></div>
</Layout>

<style>
  body {
    height: 100vh;
    overflow-y: hidden;
  }
  body {
    background-color: #3f313f;
  }
  .texture-preview {
    background-color: rgba(86, 101, 115, 80%);
    border: 5px solid #324168;
    border-radius: 5px;
    width: 150px;
    height: 150px;
    position: fixed;
    bottom: 20px;
    right: 20px;
    box-shadow: 5px 5px 10px rgba(0 0 0 / 50%);
    overflow: hidden;
  }
  .texture-preview :global(img),
  .texture-preview :global(canvas) {
    max-width: 100%;
  }
</style>

<script>
  import {TextureAtlas, TextureAtlasLoader} from '@spearwolf/twopoint5d';
  import {Texture} from 'three';
  import {createTexturedQuads} from '~demos/instanced-quads/createTexturedQuads';
  import {PerspectiveOrbitDemo} from '~demos/utils/PerspectiveOrbitDemo';
  import assetsUrl from '~demos/utils/assetsUrl';

  const sample = (arr: any) => arr[Math.floor(Math.random() * arr.length)];

  // +================================================================================+
  //
  // create textured quads
  //
  // +================================================================================+

  function makeMesh(rows: number, columns: number, size: number, offset: number, atlas: TextureAtlas, texture: Texture) {
    const frames = atlas.frameNames(/numbers32/).map((name) => atlas.frame(name).coords);

    return createTexturedQuads({capacity: rows * columns, texture}, (vertexObjectPool) => {
      for (let y = 0; y < rows; y++) {
        for (let x = 0; x < columns; x++) {
          const quad = vertexObjectPool.createVO();

          quad.width = 1.0 + Math.random() * (size - 1.0);
          quad.height = quad.width;

          quad.setInstancePosition([
            x * size * offset - ((columns - 1) * size * offset) / 2,
            y * size * offset - ((rows - 1) * size * offset) / 2,
            0,
          ]);

          const texCoords = sample(frames);
          quad.setTexCoords([texCoords.s, texCoords.t, texCoords.u, texCoords.v]);
        }
      }
    });
  }

  // +================================================================================+
  //
  // start demo
  //
  // +================================================================================+

  const demo = new PerspectiveOrbitDemo(document.getElementById('canvas-container'));

  await demo.start(async () => {
    const {imgEl, texture, atlas} = await new TextureAtlasLoader().loadAsync(
      assetsUrl('lab-walls-tiles.json'),
      ['nearest', 'srgb'],
      {
        overrideImageUrl: assetsUrl('lab-walls-tiles.png'),
      },
    );

    console.log('loaded texture-atlas', {imgEl, atlas, texture});

    document.getElementById('texture-preview').appendChild(imgEl);

    const mesh = makeMesh(16, 32, 3.5, 1, atlas, texture);

    console.log('TexturedQuadsMesh', mesh);

    demo.scene.add(mesh);
  });
</script>
