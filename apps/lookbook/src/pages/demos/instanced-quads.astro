---
import Layout from '~layouts/VanillaDemo.astro';
import {title} from './instanced-quads.json';
---

<Layout title={title}>
  <script id="vertexShader" type="x-shader/x-vertex">
    attribute vec2 quadSize;
    attribute vec3 instancePosition;

    void main() {
      vec4 pos = vec4(
        position.x * quadSize.x + instancePosition.x,
        position.y * quadSize.y + instancePosition.y,
        position.z + instancePosition.z,
        1.0
      );

      gl_Position = projectionMatrix * modelViewMatrix * pos;
    }
  </script>

  <script id="fragmentShader" type="x-shader/x-fragment">
    void main()	{
      gl_FragColor = vec4(1.0, 0.3, 0.6, 0.9);
    }
  </script>

  <canvas id="canvas-container" resize-to="window"></canvas>
</Layout>

<style>
  body {
    height: 100vh;
    overflow-y: hidden;
  }
  body {
    background-color: #391e39;
    background: radial-gradient(circle, rgba(189, 70, 98, 1) 0%, rgba(37, 4, 73, 1) 100%);
    color: #eee;
    font-family: sans-serif;
    font-size: 16px;
    line-height: 2;
  }
  em {
   font-size: 84.615384%;
   color: #ddd;
  }
</style>

<script>
  import {InstancedVertexObjectGeometry, VO, VertexObjects} from '@spearwolf/twopoint5d';
  import {DoubleSide, ShaderMaterial} from "three";
  import {PerspectiveOrbitDemo} from "~utils/PerspectiveOrbitDemo";

  interface BaseQuad extends VO {
    setPosition(position: [number, number, number, number, number, number, number, number, number, number, number, number]): void;
  }

  class BaseQuad {
    make(width = 0.5, height = 0.5) {
      this.setPosition([
        - width, - height, 0,
        - width, + height, 0,
        + width, + height, 0,
        + width, - height, 0,
      ]);
    }
  }

  const BaseQuadDescriptor = {
    vertexCount: 4,
    indices: [0, 2, 1, 0, 3, 2],

    attributes: {
      position: { components: ["x", "y", "z"] },
    },

    basePrototype: BaseQuad.prototype,
  };

  interface InstancedQuad extends VO {
    width: number;
    height: number;

    setInstancePosition: (position: [number,number]) => void;
  }

  const InstancedQuadDescriptor = {
    meshCount: 1,

    attributes: {
      quadSize: { components: ["width", "height"] },
      instancePosition: { components: ["x", "y", "z"] },
    },
  };

  function makeMesh(rows: number, columns: number, size: number, offset: number) {
    const capacity = rows * columns;

    const geometry = new InstancedVertexObjectGeometry<InstancedQuad, BaseQuad>(
      InstancedQuadDescriptor,
      capacity,
      BaseQuadDescriptor
    );

    geometry.basePool.createVO().make();

    for (let y = 0; y < rows; y++) {
      for (let x = 0; x < columns; x++) {
        const cross = geometry.instancedPool.createVO();
        cross.width = 1.0 + Math.random() * (size - 1.0);
        cross.height = 1.0 + Math.random() * (size - 1.0);
        cross.setInstancePosition([
          x * size * offset - ((columns - 1) * size * offset) / 2,
          y * size * offset - ((rows - 1) * size * offset) / 2,
        ]);
      }
    }

    const material = new ShaderMaterial({
      vertexShader: document.getElementById("vertexShader").textContent,
      fragmentShader: document.getElementById("fragmentShader").textContent,
      transparent: true,
      side: DoubleSide,
    });

    const mesh = new VertexObjects(geometry, material);
    mesh.name = "InstancedQuadsMesh";

    return mesh;
  }

  const demo = new PerspectiveOrbitDemo(
    document.getElementById("canvas-container")
  );

  demo.on("init", ({ scene }) => {
    scene.add(makeMesh(10, 20, 3.2, 1.2));
  });

  demo.start();

  console.log("InstancedQuadsMesh", demo.scene.children[0]);
</script>
