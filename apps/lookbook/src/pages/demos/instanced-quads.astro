---
import Layout from '~layouts/VanillaDemo.astro';
import {description, showSource, title} from './_instanced-quads.json';
---

<Layout title={title} showSource={showSource}>
  <p slot="demo-description">{description}</p>

  <canvas id="canvas-container" resize-to="window"></canvas>
</Layout>

<style>
  body {
    height: 100vh;
    overflow-y: hidden;
  }
  body {
    background-color: #391e39;
    background: radial-gradient(circle, rgba(189, 70, 98, 1) 0%, rgba(37, 4, 73, 1) 100%);
  }
</style>

<script>
  import {
    InstancedVertexObjectGeometry,
    positionByInstancePosition,
    VertexObjectPool,
    VertexObjects,
    type VO,
  } from '@spearwolf/twopoint5d';
  import {add, attribute, cos, length, mul, sin, sub, uniform, vec2, vec3, vec4} from 'three/tsl';
  import {NodeMaterial} from 'three/webgpu';
  import {PerspectiveOrbitDemo} from '~demos/utils/PerspectiveOrbitDemo';

  const demo = new PerspectiveOrbitDemo(document.getElementById('canvas-container'), {forceWebGL: true});

  demo.camera.position.z = 110;
  demo.camera.position.y = -100;

  // +================================================================================+
  //
  // base quad
  //
  // +================================================================================+

  interface BaseQuad extends VO {
    setPosition(position: [number, number, number, number, number, number, number, number, number, number, number, number]): void;
  }

  class BaseQuad {
    make(width = 0.5, height = 0.5) {
      this.setPosition([-width, -height, 0, -width, +height, 0, +width, +height, 0, +width, -height, 0]);
    }
  }

  const BaseQuadDescriptor = {
    vertexCount: 4,
    indices: [0, 2, 1, 0, 3, 2],

    attributes: {
      position: {components: ['x', 'y', 'z']},
    },

    basePrototype: BaseQuad.prototype,
  };

  // +================================================================================+
  //
  // instanced quad
  //
  // +================================================================================+

  interface InstancedQuad extends VO {
    width: number;
    height: number;

    setInstancePosition: (position: [number, number]) => void;
  }

  const InstancedQuadDescriptor = {
    meshCount: 1,

    attributes: {
      quadSize: {components: ['width', 'height']},
      instancePosition: {components: ['x', 'y', 'z']},
    },
  };

  // +================================================================================+
  //
  // create instanced geometry and mesh
  //
  // +================================================================================+

  function createMesh(rows: number, columns: number, size: number, offset: number) {
    const geometry = new InstancedVertexObjectGeometry<InstancedQuad, BaseQuad>(
      InstancedQuadDescriptor,
      rows * columns,
      BaseQuadDescriptor,
    );

    // Create a base quad to use as a prototype for instanced quads
    geometry.basePool.createVO().make();

    // Now, create the instanced quads ..
    createQuads(geometry.instancedPool, rows, columns, size, offset);

    const mesh = new VertexObjects(geometry, createMaterial());

    mesh.name = 'InstancedQuadsMesh';

    return mesh;
  }

  // +================================================================================+
  //
  // create quads
  //
  // +================================================================================+

  function createQuads(
    vertexObjectPool: VertexObjectPool<InstancedQuad>,
    rows: number,
    columns: number,
    size: number,
    offset: number,
  ) {
    for (let y = 0; y < rows; y++) {
      for (let x = 0; x < columns; x++) {
        const quad = vertexObjectPool.createVO();

        quad.width = 1.0 + Math.random() * (size - 1.0);
        quad.height = 1.0 + Math.random() * (size - 1.0);

        quad.setInstancePosition([
          x * size * offset - ((columns - 1) * size * offset) / 2,
          y * size * offset - ((rows - 1) * size * offset) / 2,
        ]);
      }
    }
  }

  // +================================================================================+
  //
  // create material
  //
  // +================================================================================+

  function createMaterial() {
    const material = new NodeMaterial();

    const time = uniform(demo.now);
    time.onFrameUpdate(() => demo.now);

    const pos = positionByInstancePosition({scale: vec3(attribute('quadSize'), 1.0)});

    const instaPosLen = length(attribute('instancePosition').xy);

    const z = sin(add(mul(time, -2.0), mul(instaPosLen, 0.05)));

    material.positionNode = vec3(pos.xy, add(pos.z, mul(z, 11.0)));

    const r = mul(add(z, 1), 0.5);
    const b = mul(add(cos(instaPosLen), 1), 0.5);
    const g = sub(0.2, mul(length(vec2(r, b)), 0.5 * 0.1));
    const a = 0.8;

    material.colorNode = vec4(r, g, b, a);

    return material;
  }

  // +================================================================================+
  //
  // start demo
  //
  // +================================================================================+

  await demo.start(() => {
    demo.scene.add(createMesh(100, 200, 3, 1.2));
  });

  console.log('InstancedQuadsMesh', {mesh: demo.scene.children[0], demo});
</script>
