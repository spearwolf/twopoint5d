---
import Layout from '~layouts/VanillaDemo.astro';
import {description, showSource, title} from './_textured-sprites.json';
---

<Layout title={title} showSource={showSource}>
  <p slot="demo-description">{description}</p>

  <canvas id="canvas-container" resize-to="window"></canvas>

  <section class="fixed top-20 right-4 flex flex-wrap gap-1 items-center content-center justify-center">
    <div class="actionBtn render-as-billboards select-none" data-render-as-billboards="true">render as billboards</div>
  </section>
</Layout>

<style>
  body {
    height: 100vh;
    overflow-y: hidden;
  }
  body {
    background-color: #391e39;
    background: radial-gradient(circle, rgb(175 82 82) 0%, rgb(90 148 191) 100%);
    color: #eee;
    font-family: sans-serif;
    font-size: 16px;
    line-height: 2;
  }
  em {
    font-size: 84.615384%;
    color: #ddd;
  }
  .actionBtn {
    padding: 0.5em;
    background-color: rgba(50 20 90 / 60%);
    color: #eee;
    border-radius: 4px;
    border: 1px solid rgba(11, 15, 17);
    box-shadow: 4px 4px 0 rgba(11, 15, 17);
    font-size: 100%;
    font-weight: bold;
    cursor: pointer;
    display: inline-fl;
  }
</style>

<script>
  import {on} from '@spearwolf/eventize';
  import {OnDisplayInit, TexturedSprites, TileSetLoader} from '@spearwolf/twopoint5d';
  import {AlwaysDepth} from 'three';
  import {BouncingSprites} from '~demos/textured-sprites/BouncingSprites';
  import {PerspectiveOrbitDemo} from '~demos/utils/PerspectiveOrbitDemo';
  import assetsUrl from '~demos/utils/assetsUrl';

  const demo = new PerspectiveOrbitDemo(document.getElementById('canvas-container'), {antialias: false});

  on(demo, OnDisplayInit, async ({scene}) => {
    const {tileSet, texture} = await new TileSetLoader().loadAsync(
      assetsUrl('skinball-256.png'),
      {
        tileWidth: 256,
        tileHeight: 256,
        margin: 1,
      },
      ['srgb'],
    );

    const CAPACITY = 256;

    const sprites = new TexturedSprites(CAPACITY, texture);

    sprites.material.depthFunc = AlwaysDepth;

    document.querySelector(`.${RENDER_AS_BILLBOARDS}`).addEventListener('pointerdown', (e) => {
      const el = e.currentTarget as HTMLElement;
      const dataValue = el.getAttribute(`data-${RENDER_AS_BILLBOARDS}`) === 'true';
      sprites.material.renderAsBillboards = dataValue;
      el.setAttribute(`data-${RENDER_AS_BILLBOARDS}`, String(!dataValue));
      if (dataValue) {
        el.textContent = 'render as sprites';
      } else {
        el.textContent = 'render as billboards';
      }
    });

    const bouncingSprites = new BouncingSprites(sprites.spritePool, tileSet.atlas, 100, 75, 4, CAPACITY);

    bouncingSprites.createSprites();

    scene.add(sprites);

    demo.onRenderFrame(({deltaTime}) => {
      bouncingSprites.animate(deltaTime);
      sprites.update();
    });

    console.log('bouncingSprites', bouncingSprites);
    console.log('TexturedSprites', sprites);
  });

  demo.start();

  const RENDER_AS_BILLBOARDS = 'render-as-billboards';
</script>
