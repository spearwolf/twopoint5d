---
import Layout from '~layouts/VanillaDemo.astro';
import {description, showSource, title} from './_animated-billboards.json';
---

<Layout title={title} showSource={showSource}>
  <canvas id="canvas-container" resize-to="window"></canvas>

  <div class="loading-wrapper">
    <div class="loading-content">
      .&nbsp;.&nbsp;.&nbsp;l&nbsp;o&nbsp;a&nbsp;d&nbsp;i&nbsp;n&nbsp;g&nbsp;.&nbsp;.&nbsp;.
    </div>
  </div>

  <p slot="demo-description">{description}</p>
</Layout>

<style>
  body {
    height: 100vh;
    overflow-y: hidden;
  }
  body {
    background-color: rgb(17 28 38);
    color: #eee;
  }
  .loading-wrapper {
    position: fixed;
    inset: 0;
    display: flex;
    justify-content: center;
  }
  .loading-content {
    margin: auto;
    text-transform: lowercase;
    font-size: 24px;
    font-family: monospace;
  }
</style>

<script>
  import {on} from '@spearwolf/eventize';
  import {
    AnimatedSprites,
    AnimatedSpritesGeometry,
    AnimatedSpritesMaterial,
    FrameBasedAnimations,
    TileSetLoader,
  } from '@spearwolf/twopoint5d';
  import {LinearSRGBColorSpace, Mesh, MeshBasicMaterial, PlaneGeometry, TextureLoader} from 'three';
  import {BouncingSprites} from '~demos/animated-billboards/BouncingSprites';
  import {PerspectiveOrbitDemo} from '~demos/utils/PerspectiveOrbitDemo';
  import assetsUrl from '~demos/utils/assetsUrl';

  const demo = new PerspectiveOrbitDemo(document.getElementById('canvas-container'), {antialias: false});

  await demo.start(async () => {
    demo.camera.position.set(0, 70, -220);

    const CAPACITY = 400;

    const geometry = new AnimatedSpritesGeometry(CAPACITY);

    const {tileSet, texture} = await new TileSetLoader().loadAsync(assetsUrl('nobinger-anim-sheet.png'), {
      tileWidth: 64,
      tileHeight: 64,
      margin: 1,
    });

    const anims = new FrameBasedAnimations();
    const animId = anims.add('anim0', 0.66, tileSet, [1, 2, 3, 4, 5, 4, 3, 2]);

    const bouncingSprites = new BouncingSprites(geometry.instancedPool, tileSet.atlas, 150, 100, 40);

    bouncingSprites.createSprites(CAPACITY, animId);

    const material = new AnimatedSpritesMaterial({
      colorMap: texture,
      animsMap: anims.bakeDataTexture(),
      depthTest: true,
      depthWrite: true,
      renderAsBillboards: true,
    });

    const mesh = new AnimatedSprites(geometry, material);

    demo.scene.add(mesh);

    on(demo, 'frame', ({deltaTime, now}) => {
      bouncingSprites.animate(deltaTime);
      material.uniforms['time'].value = now;
      mesh.update();
    });

    console.log('BouncingSprites', bouncingSprites);

    const blueGroundTexture = await new TextureLoader().loadAsync(assetsUrl('blue-ground-2048x.webp'));
    blueGroundTexture.colorSpace = LinearSRGBColorSpace;

    const planeGeometry = new PlaneGeometry(400, 400);
    const planeMaterial = new MeshBasicMaterial({
      transparent: true,
      map: blueGroundTexture,
    });

    const plane = new Mesh(planeGeometry, planeMaterial);
    plane.rotation.x = -Math.PI / 2;
    plane.rotation.z = Math.PI;

    demo.scene.add(plane);

    console.log('AnimatedSprites', mesh);
  });

  document.querySelector('.loading-wrapper').style.display = 'none';
</script>
