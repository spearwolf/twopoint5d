---
import Layout from '~layouts/VanillaDemo.astro';
import {description, showSource, title} from './_map2d-layer3d.json';
---

<Layout title={title} showSource={showSource} description={description}>
  <canvas id="canvas-container" resize-to="window"></canvas>

  <div class="info-controls text-sky-200 pt-4 pl-1">
    <p>Use the W, A, S, and D keys to scroll the map.</p>
    <p>Use the mouse to rotate the camera.</p>
  </div>
</Layout>

<style>
  body {
    height: 100vh;
    overflow-y: hidden;
  }
  body {
    background-color: #458497;
    background-image: linear-gradient(to right bottom, #458497 0, #2e4564 52%, #9b1a61);
    color: #eee;
  }
</style>

<script>
  import {
    Map2D,
    Map2DTileSpritesRenderer,
    PanControl2D,
    RectangularVisibilityArea,
    RepeatingTilesProvider,
    TileSetLoader,
    TileSpritesGeometry,
    TileSpritesMaterial,
  } from '@spearwolf/twopoint5d';
  import {BoxGeometry, EdgesGeometry, Fog, LineBasicMaterial, LineSegments} from 'three/webgpu';
  import {PerspectiveOrbitDemo} from '~demos/utils/PerspectiveOrbitDemo';
  import assetsUrl from '~demos/utils/assetsUrl';
  import {makePoints} from '~demos/utils/makePoints';

  const demo = new PerspectiveOrbitDemo(document.getElementById('canvas-container'), {antialias: false});

  (window as any).demo = demo;
  console.log('demo', demo);

  demo.start(async () => {
    const {scene, camera} = demo;

    camera.position.set(0, 350, 500);
    camera.far = 8000;

    const geometry = new BoxGeometry(640, 20, 480);
    const edges = new EdgesGeometry(geometry);
    const line = new LineSegments(edges, new LineBasicMaterial({color: 0xf0f0f0}));
    scene.add(line);

    // create a map2d
    // -------------------------------------

    const map2d = new Map2D();

    map2d.tileWidth = 256;
    map2d.tileHeight = 256;
    map2d.xOffset = -128;
    map2d.yOffset = -128;

    map2d.visibilitor = new RectangularVisibilityArea(640, 480);

    map2d.centerX = 0;
    map2d.centerY = 0;

    scene.add(map2d);

    scene.fog = new Fog(0x458497, 300, 1500);

    (window as any).map2d = map2d;
    console.log('map2d', map2d);

    // create a tile data provider
    // ------------------------------------------------------

    const tileData = new RepeatingTilesProvider([
      [1, 2],
      [3, 4],
    ]);

    // load a tileset texture
    // ------------------------------------------------------

    const {tileSet, texture} = await new TileSetLoader().loadAsync(
      assetsUrl('map2d-debug-tiles_4x256x256.png'),
      {
        tileWidth: 256,
        tileHeight: 256,
      },
      ['srgb'],
    );

    // create the tile renderer
    // ------------------------------------------------------

    const renderer = new Map2DTileSpritesRenderer();

    map2d.add(renderer);

    map2d.addTileRenderer(renderer);

    renderer.tileData = tileData;
    renderer.tileSet = tileSet;

    renderer.geometry = new TileSpritesGeometry(1000);

    renderer.material = new TileSpritesMaterial({
      colorMap: texture,
    });

    (window as any).tileRenderer = renderer;
    console.log('tileRenderer', renderer);

    map2d.update();

    // prettier-ignore
    scene.add(makePoints([
      -384, 11, -384,
      -128, 11, -384,
      128, 11, -384,
      384, 11, -384,

      -384, 11, -128,
      -128, 11, -128,
      128, 11, -128,
      384, 11, -128,

      -384, 11, 128,
      -128, 11, 128,
      128, 11, 128,
      384, 11, 128,

      -384, 11, 384,
      -128, 11, 384,
      128, 11, 384,
      384, 11, 384,
    ]));

    // add a pan control
    // ------------------------------------------------------

    const panControl = new PanControl2D({
      disablePointer: true,
      speed: 200,
    });

    demo.onRenderFrame(({deltaTime}) => {
      panControl.update(deltaTime);

      map2d.centerX = panControl.panView.x;
      map2d.centerY = panControl.panView.y;
      map2d.update();
    });
  });
</script>
