---
import Layout from '~layouts/VanillaDemo.astro';
import {description, showSource, title} from './_crosses.json';
---

<Layout title={title} showSource={showSource}>
  <p slot="demo-description">{description}</p>
  <canvas id="canvas-container" resize-to="window"></canvas>
</Layout>

<style>
  body {
    height: 100vh;
    overflow-y: hidden;
  }
  body {
    background: radial-gradient(circle, rgb(77, 141, 81) 0%, rgb(113, 19, 114) 100%);
  }
</style>

<script>
  import {VertexObjectGeometry, VertexObjects} from '@spearwolf/twopoint5d';
  import {abs, attribute, directionToColor, mul, sub, vec4} from 'three/tsl';
  import {DoubleSide, MeshBasicNodeMaterial} from 'three/webgpu';
  import {Cross, CrossDescriptor} from '~demos/crosses/Crosses';
  import {PerspectiveOrbitDemo} from '~demos/utils/PerspectiveOrbitDemo';

  const COLS = 15;
  const ROWS = 20;
  const SIZE = 15;
  const OFFSET = 1.2;
  const OFFSET_Z = -5;

  const demo = new PerspectiveOrbitDemo(document.getElementById('canvas-container'));

  demo.onInit(() => {
    const geometry = new VertexObjectGeometry<Cross>(CrossDescriptor, ROWS * COLS);

    for (let i = 0; i < COLS; i++) {
      for (let j = ROWS - 1; j >= 0; j--) {
        const cross = geometry.pool.createVO();

        cross.make(SIZE, SIZE, 1 / 8, 1 / 2, OFFSET_Z * j);
        cross.rotate(i * 45 + j * 0.2);
        cross.translate(i * SIZE * OFFSET - ((COLS - 1) * SIZE * OFFSET) / 2, 0);
      }
    }

    const material = new MeshBasicNodeMaterial({
      transparent: true,
      side: DoubleSide,
    });

    material.colorNode = vec4(
      directionToColor(attribute('position')).xyz,
      sub(1, mul(abs(attribute('position').z), 1 / Math.abs(ROWS * OFFSET_Z))),
    );

    const mesh = new VertexObjects(geometry, material);
    mesh.name = 'CrossMesh';

    demo.scene.add(mesh);
  });

  demo.start();

  console.dir(demo);
</script>
