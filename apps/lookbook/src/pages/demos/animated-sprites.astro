---
import Layout from '~layouts/VanillaDemo.astro';
import {description, showSource, title} from './_animated-sprites.json';
---

<Layout title={title} showSource={showSource}>
  <canvas id="canvas-container" resize-to="window"></canvas>
  <section class="fixed top-4 right-4 flex gap-2">
    <div class="actionBtn moreSprites">MORE</div>
    <div class="spriteCount">0</div>
    <div class="actionBtn lessSprites">LESS</div>
  </section>

  <p slot="demo-description">{description}</p>
</Layout>

<style>
  body {
    height: 100vh;
    overflow-y: hidden;
    background-color: #391e39;
    background: radial-gradient(circle, rgb(82 95 132) 0%, rgb(149 188 199) 100%);
    color: #eee;
  }
  .spriteCount {
    padding: 0.5rem 1rem;
    color: #eee;
    font-weight: bold;
    min-width: 3em;
  }
  .actionBtn {
    padding: 0.5rem 1rem;
    background-color: rgba(0 0 33 / 50%);
    color: #eee;
    border-radius: 1rem;
    cursor: pointer;
  }
  .actionBtn:hover {
    background-color: rgba(0 0 33 / 70%);
    color: #fff;
    user-select: none;
  }
</style>

<script>
  import {on} from '@spearwolf/eventize';
  import {
    AnimatedSprites,
    AnimatedSpritesGeometry,
    AnimatedSpritesMaterial,
    FrameBasedAnimations,
    OnDisplayInit,
    OnDisplayRenderFrame,
    TileSetLoader,
  } from '@spearwolf/twopoint5d';
  import {BouncingSprites} from '~demos/animated-sprites/BouncingSprites';
  import {PerspectiveOrbitDemo} from '~demos/utils/PerspectiveOrbitDemo';
  import assetsUrl from '~demos/utils/assetsUrl';

  const demo = new PerspectiveOrbitDemo(document.getElementById('canvas-container'), {antialias: false});

  const renderSpriteCount = (count: number) => {
    document.querySelector('.spriteCount').textContent = count.toString();
  };

  on(demo, OnDisplayInit, async ({scene, camera}) => {
    camera.position.z = 60;

    const CAPACITY = 1000;
    const INITIAL_SPRITE_COUNT = 500;

    const geometry = new AnimatedSpritesGeometry(CAPACITY);

    const {tileSet, texture} = await new TileSetLoader().loadAsync(assetsUrl('nobinger-anim-sheet.png'), {
      tileWidth: 64,
      tileHeight: 64,
      margin: 1,
    });

    const anims = new FrameBasedAnimations();
    const animId = anims.add('anim0', 0.66, tileSet, [1, 2, 3, 4, 5, 4, 3, 2]);

    const bouncingSprites = new BouncingSprites(geometry.instancedPool, tileSet.atlas, 500, 75, 7);

    bouncingSprites.startSpeedBaseX = 10;
    bouncingSprites.startSpeedX = 50;

    bouncingSprites.createSprites(INITIAL_SPRITE_COUNT, animId);

    renderSpriteCount(INITIAL_SPRITE_COUNT);

    const material = new AnimatedSpritesMaterial();

    material.colorMap = texture;
    material.animsMap = anims.bakeDataTexture();

    material.renderAsBillboards = false;
    material.depthTest = false;
    material.depthWrite = false;

    const mesh = new AnimatedSprites(geometry, material);

    scene.add(mesh);

    on(demo, OnDisplayRenderFrame, ({deltaTime, now}) => {
      bouncingSprites.animate(deltaTime);
      material.uniforms['time'].value = now;
      mesh.update();
    });

    console.log('BouncingSprites', bouncingSprites);
    console.log('AnimatedSprites', mesh);

    document.querySelector('.moreSprites').addEventListener('click', () => {
      bouncingSprites.createSprites(20, animId);
      renderSpriteCount(bouncingSprites.sprites.length);
    });

    document.querySelector('.lessSprites').addEventListener('click', () => {
      bouncingSprites.destroySprites(20);
      renderSpriteCount(bouncingSprites.sprites.length);
    });
  });

  demo.start();
</script>
