---
import {loadMetadataForDemos} from '~demos/utils/loadMetadataForDemos';
import ClearActionIcon from '../images/iconoir/xmark-circle-solid.svg?raw';

const {uniqTagKeys, tags} = loadMetadataForDemos();
---

<section class="tags select-none">
  <ul class="tag-cloud-filter">
    {
      uniqTagKeys.sort().map((tag) => (
        <li
          class="tag"
          data-tag={tag}
          data-related-demos={Array.from(tags.get(tag).demoIds).join(',')}
          data-related-tags={Array.from(tags.get(tag).relatedTags).join(',')}
        >
          {tag}
        </li>
      ))
    }
  </ul>
  <div class="flex flex-row justify-end lg:justify-start pt-4">
    <button class="clear-tags-action inactive inline-flex flex-row items-start justify-center gap-2"
      ><Fragment set:html={ClearActionIcon} /><span class="label">clear selection</span></button
    >
  </div>
</section>

<style>
  .clear-tags-action {
    color: var(--color-primary);
    background-color: var(--color-background-light);
    font-size: var(--tag-font-size);
    padding: 0.3em 0.6em;
    border-radius: 2em;
  }
  .clear-tags-action.inactive {
    color: var(--color-primary-inactive);
    background-color: transparent;
    cursor: default;
  }
  .clear-tags-action:is(:hover, :focus-within) {
    box-shadow: 0 0 1px 1px var(--color-primary-highlight);
  }
  .clear-tags-action.inactive:is(:hover, :focus-within) {
    box-shadow: none;
  }
  .clear-tags-action .label {
    line-height: 1.8;
  }

  .tags {
    color: var(--color-primary);
  }
  .tag {
    display: inline-block;
    background-color: var(--color-background-light);
    cursor: pointer;
    margin: 0.3rem 0.3rem;
    font-size: var(--tag-font-size);
    padding: var(--tag-padding);
    border-radius: var(--tag-border-radius);
  }
  .tag.active {
    color: var(--color-background-dark);
    background-color: var(--color-primary);
  }
  .tag.inactive {
    color: var(--color-primary-inactive);
    background-color: transparent;
  }
  .tag:is(:hover, :focus-within) {
    box-shadow: 0 0 1px 1px var(--color-primary-highlight);
  }
</style>

<script>
  const ATTR_TAG = 'data-tag';
  const ATTR_RELATED_DEMOS = 'data-related-demos';
  const ATTR_RELATED_TAGS = 'data-related-tags';

  const CSS_TAG_CLOUD_FILTER = '.tag-cloud-filter';

  const CSS_ACTIVE = 'active';
  const CSS_INACTIVE = 'inactive';

  function readUniqValuesFromAttribute($el: HTMLElement, attrName: string, target: Set<string> = new Set()): Set<string> {
    $el
      .getAttribute(attrName)
      .split(',')
      .forEach((value: string) => {
        target.add(value);
      });

    return target;
  }

  const getClearTagsAction = () => document.querySelector('.tags .clear-tags-action') as HTMLButtonElement;

  function dispatchShowDemosEvent(payload: {showAll: boolean; filterById?: string[]}): void {
    getClearTagsAction().classList.toggle(CSS_INACTIVE, payload.showAll);

    document.dispatchEvent(
      new CustomEvent('lookbook.showDemos', {
        detail: {
          ...payload,
        },
      }),
    );
  }

  function clearTags() {
    for (const $tag of document.querySelector(CSS_TAG_CLOUD_FILTER).querySelectorAll(`[${ATTR_TAG}]`)) {
      $tag.classList.remove(CSS_INACTIVE);
      $tag.classList.remove(CSS_ACTIVE);
    }
    dispatchShowDemosEvent({showAll: true});
  }

  getClearTagsAction().addEventListener('pointerdown', () => clearTags());

  document.querySelectorAll(CSS_TAG_CLOUD_FILTER).forEach(($el) => {
    $el.addEventListener(
      'pointerdown',
      (event: any) => {
        if (event.isPrimary && event.button === 0 && event.target.hasAttribute(ATTR_TAG)) {
          const $tag = event.target;
          const $container = $tag.parentNode;
          const $allTags = $container.querySelectorAll(`[${ATTR_TAG}]`);

          if ($tag.classList.contains(CSS_INACTIVE)) {
            for (const el of $allTags) {
              el.classList.remove(CSS_INACTIVE);
              el.classList.remove(CSS_ACTIVE);
            }
          }

          $tag.classList.toggle(CSS_ACTIVE);

          const $activated = $container.querySelectorAll(`.${CSS_ACTIVE}`);

          if ($activated.length === 0) {
            for (const el of $container.querySelectorAll(`.${CSS_INACTIVE}`)) {
              el.classList.remove(CSS_INACTIVE);
            }
            dispatchShowDemosEvent({showAll: true});
            return;
          }

          const relatedTags = readUniqValuesFromAttribute($activated[0], ATTR_RELATED_TAGS);
          const relatedDemos = readUniqValuesFromAttribute($activated[0], ATTR_RELATED_DEMOS);

          for (let i = 1; i < $activated.length; i++) {
            const _relatedTags = readUniqValuesFromAttribute($activated[i], ATTR_RELATED_TAGS);
            for (const tag of relatedTags) {
              if (!_relatedTags.has(tag)) {
                relatedTags.delete(tag);
              }
            }
            const _relatedDemos = readUniqValuesFromAttribute($activated[i], ATTR_RELATED_DEMOS);
            for (const demo of relatedDemos) {
              if (!_relatedDemos.has(demo)) {
                relatedDemos.delete(demo);
              }
            }
          }

          const activeTags = (Array.from($activated) as HTMLElement[]).map((el) => el.getAttribute(ATTR_TAG));
          activeTags.forEach((tag) => relatedTags.add(tag));

          for (const el of $allTags) {
            const tagName = el.getAttribute(ATTR_TAG);
            if (activeTags.includes(tagName)) {
              el.classList.remove(CSS_INACTIVE);
            }
            if (relatedTags.has(tagName)) {
              el.classList.remove(CSS_INACTIVE);
            } else {
              el.classList.add(CSS_INACTIVE);
            }
          }

          dispatchShowDemosEvent({
            filterById: Array.from(relatedDemos),
            showAll: false,
          });
        }
      },
      {passive: true},
    );
  });
</script>
